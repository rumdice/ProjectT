Date : 2021.07.23

1. AWS rds 생성
root 계정 정보 설정
툴 접속 허용을 위해 퍼블릭 접근 허용 3306 port
보안 그룹 3306 포트 확인하기


2. AWS ec2생성
인스턴스 생성시 pem파일을 만들 수 있음.
22 port 확인 후 터미널 접속


3.AWS Route53
AWS 에서 도메인 하나 구입


4. 리눅스 셋팅
셋팅 문서 참조


5. TS코드 완전 처음부터 작성하기 (vscode)
작업 폴더 vscode 열고 터미널에 
> npm init
> npm install -t typescript
package.json 파일 생성 됨

> tsc --init 
tsc.ps1 파일을 로드 할 수 없다 어쩌구 하면서 안되면

관리자 권한으로 파워쉘 키기
> Set=ExecutionPolicy RemoteSigned

다시 vscode 터미널에서 
> tsc --init (잘 됨)
tsconfig.json 파일 생성 됨


6. vscode 에서의 추가 설정
터미널 - 작업구성 메뉴 선택
tsc: 빌드 - tsconfig.json 선택
task.json 파일 생성 됨

F5 (단축키 셋팅이 visual studio로 되어있음)

vscode 옆에 텝에 벌레모양 (디버깅 메뉴 선택)
launch.json 파일 만들기
환경 선택에서 node.js 선택 (2개 있는데 위엣것 선택)

launch.json 파일이 생성 됨
이후 vscode 에서 F5나 ctrl-F5 할 경우 일일히 환경 선택 하지 않아도 바로 디버깅/실행 가능

자동으로 생성된 launch.json 파일에서 
"program": "${file}", 해당 부분만 이렇게 변경
디버그 할 파일 선택 후 F5


Date : 2021.07.26
오늘 한 것
1. express 사용 준비
> npm install @types/express


2. 필요 패키지 설치
> npm install @types/typescript

> npm install @types/mysql2 (없음)
> npm install mysql2

3. 현재 발견된 문제점
빌드시 커맨드 창에 tsc --build tsconfig.json 입력해줘야 빌드가 됨
F5 키로 빌드-> 디버깅을 한번에 하고 싶은데 어떻게 했더라?

> tsc --build tsconfig.json 
하면 ./out 경로에 js 코드가 생성됨

서버 실행
> node index.js

해당 코드를 실행하면 import 한 패키지에 따라 패키지가 없다고 나옴
ex) Cannot find moudle 'express'

방금 위에서  npm install @types/express로 설치 했는데 왜 안나오나.
js 로 생성된 코드(index.js)가 express를 불러오지 못 함.

> npm install express 


3.필요한 패키지 추가 설치 (페이지 랜더용)
> npm install pug
> npm install pug-bootstrap


4. AWS 인증서 발급 (ACM)
AWS에서 도메인을 발급 받았으면 인증서를 발급받자
ACM 메뉴에서 진행 가능
(CNAME)
 
하위 도메인에 대한 접근 경로 수정
AWS 로드 벨런스 설정 

5. 문제점 및 개선해야 할 점
개발 환경에서 디버깅이 불편함
서버 보안이 너무 허술 함
 

Date : 2021.07.31
오늘 한 것
vscode 에서의 타입 스크립트 디버깅/실행 환경 설정
(F5 키 눌러도 안되었었음)

> npm i ts-node
(이제 디버깅은 됨)
(이거 설치 안해도 ts파일 자체의 디버깅은 가능했음)
(import 구문이 있는 파일은 에러가 발생함)


Date : 2021.08.03
오늘 한 것
빌드 관련 정리 
- launch.json 파일 작성 완료

빌드 (따로 진행)
ctrl + shift + b (vs shotcut mapping 해서 단축키 똑같음)
- cmd 에서 커맨드로 tsc 한 효과
- 지정된 경로 ./out 폴더에 js파일과 디버깅에 필요한 .map파일이 생김

F5 키로 디버그 또는 ctrl + F5로 디버깅 하지 않고 실행
- import 구문에서 에러 발생하지 않음. 실행 및 디버그 확인

로깅에 필요한 패키지 설치
> npm i @types/winston
> npm i @types/winston-daily-rotate-file (없음. 에러)
> npm i winston-daily-rotate-file

admin 서버에서 더 해볼만한것
1. 프론트 부분은 반응형 페이지로 발전 시키기
2. vue.js 사용 해보기

Date : 2021.08.04
오늘 한 것
websocket 관련 패키지 설치
> npm i @types/ws
> npm i ws

redis 관련 패키지 설치
> npm i @types/redis
> npm i redis (js 디버깅 할때 에러 안나게?)

chat서버 기반 구축
game서버 기반 구축

내일 혹은 다음에 해야 할 것
패킷 테스터(http, ws)
부하 테스터


Date : 2021.08.05
오늘 한 것
https://github.com/MicrosoftArchive/redis/releases
개발 pc (윈도우)에 redis 설치

서버 (리눅스)에는 전에 설치 했었다. 
로컬 환경 테스트 목적으로 설치.

redis 환경 변수 경로 설정
Path 에 경로 추가
C:\Program Files\Redis (그냥 기본으로 설치 했을때의 redis 경로)

cmd
>redis-cli
redis 쓸 수 있게 뜨면 성공

패킷 테스터 초안 작성
game server
tester_game.ts (디버깅 확인)

chat server
별도 경로에 작성
https://github.com/rumdice/ProjectC/tree/main/CSharp/ChatTester


개선 사항 및 해야 할 것
게임, 채팅 서버 빌드 배포 스트립트 작성
테스터 유니티 클라 붙여보기
서버 머신에 jenkins 셋팅
대충 틀만 잡고 넘어간 부분 디테일 업 및 기능과 내용 추가


Date : 2021.08.14
오늘 할 것

타입스크립트 답게 쓰기
조금 더 함수형 프로그래밍에 익숙한 개발자가 되자

ts 코드 스타일 일괄 적용

프로젝트의 터미널 창 열기
> npm install tslint (이거로만 설치해서 그런가 명령어 인식을 못함)
> npm i -g tslint (전역 설치)
> tslint --init
tslint.json 파일 생성

tslint의 룰 적용 (일단 최소 내용만)
세미콜론 없에기
콤마
더 다양한 룰이 있으니 나중에 찾아보자

룰을 적용하면 기존코드에 에러가 파팍 뜰 줄 알았더니 안 그럼...뭘 빼먹었나.
기대한건 기존의 ts format 코드를 검사하여 에러를 띄우는 것, 기대한 대로 동작은 안함.

삭제 후 재설치
> npm i -g tslint (전역 설치만 진행)
> tslint --init
tslint.json 파일 생성
rules 편집 (세미콜론, 콤마)

vscode 확장 프로그램 tslint 설치
vscode 재실행

활성화된 파일중에 포맷이 안 맞으면 노랗게 뜸.
왜 재설치 하니까 잘 되는지 모르겠지만 차이점은 확장 프로그램 설치후 .vscode폴더에 하위 파일이 생김
- settings.json
- extensions.json

(tslint 관련 설정이 잡혀있음)

pretter는 일단 현재 포맷에 익숙해 진 후에 자동으로 적용되게 다음에 적용하자.
- 형태에 맞게 코드 자동으로 잡아줌


https://palantir.github.io/tslint/rules/semicolon/

"semicolon": [true, "never"],

세미콜론을 강제적으로 쓰지 않게끔 룰 적용
세미콜론을 쓰든 안쓰든 에러는 나지 않고 C#의 스타일에 익숙해져 있지만 
언어와 환경에 맞게 스타일에 익숙해지는 것도 중요하다.



Date : 2021.08.15
오늘 할 것
타입스크립트 답게, 함수형 프로그래밍에 더 가깝게

tslint의 본 코드 적용
- 세미콜론
- 공백
- 선언된 타입 사용시 <> 보다  as 사용 권장
- 화살표 함수 사용 권장
- lowerCamelCase 사용 권장
- require 보다 import 사용 권장
- let과 const를 값 대입 여부에 따라 정확한 사용 권장
- console.log 사용 지양
- ParseInt() 사용 지양

테스트 코드
js 및 ts는 객채를 const로 선언해도 맴버는 값 대입이 가능. 맴버는 값이 아닌 정의된 값의 타입으로 판별함. (test_any.ts)

stackoverFlow 
https://stackoverflow.com/questions/7818903/jslint-says-missing-radix-parameter
중간에 리플 보면 Number()가 ParseInt보다 대충 6배 빠르다고 나옴


Date : 2021.08.16
오늘 할 것
1.cronjob 붙이기
- 커맨드 실행
> npm i cron
> npm i @types/cron 

2.랭킹서버 초안
- 만약에 실시간 랭킹을 원할 수도 있으니 실시간 서버로 올리기[https (x), ws (o)]
- 실시간 랭킹이 필요 없으면 굳이?
- 생각해 보니까 그냥 랭킹은 redis를 이용해서 구하고 게임서버에 물리면 되지 않았을까 싶기도 함. 

3.테이블 파서 알아보기 (csv, xlsx)

4.개선할 사항 정리
- typescript 답게 사용하기, 무분별하게 사용한 any를 타입을 정해서 쓰자.
- 함수가 변수랑 취급이 같게끔 함수도 타입 취급.? 함수의 재사용성을 높이기.
- TODO: 한 부분의 개선 작업

Date : 2021.08.18
오늘 할 것
1.xlsx 붙이기 
https://openbase.com/categories/js/best-nodejs-xlsx-parser-libraries
- 인기 순서 기준 익숙해 보이는 것 고름

> npm i node-xlsx
> npm i @types/node-xlsx

2.csv 붙이기
https://openbase.com/categories/js/best-nodejs-csv-parser-libraries
- 인기 좋은 순서 기준으로 고름

> npm i fast-csv
> npm i @types/fast-csv


vscode 의 디버그 콘솔 창과 실제 콘솔에서 node 실행창의 보이는 결과가 달라 보임?
- 그럴리 없는데 원인 찾아보기

Date : 2021.08.25
오늘 할 것
작성된 코드 중 문제점

각 작업을 비동기 처리 해야 함. (shell -> csv -> xlsx)
- 각 작업 완료 후 다음 작업 진행

비동기 처리가 되지 않고 동기 처리가 되는건지 console.log에만 그렇게 표현되는 건지?
- 함수 내부에서 함수 호출로 해결은 했지만 별로 스마트한 방법은 아닌듯.


비동기 처리 관련 패키지 처리 (serise, waterfall)
> npm i async
> npm i @types/async

- 이 부분을 이용한 활용법?


Date : 2021.09.05
오늘 할 것
테이블 데이터의 자동 패치 시스템 만들기

1. 다른 git repository에서 git push를 지속적으로 감지.
2. cron에 올린 작업을 순차 실행.
2-0. 타겟 repo의 git push가 되는지 지속적으로 감지. (head 변화 유무)
2-1 shell 에서 배치 스크립트를 실행하여 git pull 받기. (git pull을 받는 대상 폴더는 사전 기반 작업이 되어있어야 한다)
2-2 pull을 받아서 데이터가 갱신되면 csv 파싱 하여 메모리 적재.

로컬 테스트 및 실제 내 서버에 올려서 테스트 하기


Date : 2021.10.13
새로운 환경에서 바로 실행 가능하게 프로젝트 변경
- 설정파일등 git 포함

db 정보 보안 - 사용시 의미있는 값 넣어서 쓰기
 dbconfig_local.json

사용자 pc 설치 사항
node 윈도우 설치
redis 윈도우 설치

디버그 스텝
1.
vscode 터미널 
> tsc (빌드)
ctrl + shift + b

2.
index.ts 파일을 켜놓고 F5
실행 확인 완료
다른 프로젝트도 바로 실행 가능하게 확인해보기

2021.10.17 
코드 개선 점 찾기
채팅 서버, api 서버 linux 서버에 올리



2021.12.09 
추가 할 사항
- 빌드 환경 개선
- docker 사용 적용
- 코드정리, 코드 구조 개선

차후 추가 사항
- grpc 적용
- vue.js 적용


2021.12.13
추가 할 사항
1. 빌드 환경 개선 (완료)
- 빌드 환경 문제 수정
- 테스터도 바로 실행 할 수 있는 환경 만들면 좋을 듯?

2. docker 환경 사용하게 코드 수정 (완료)
- redis 
- mysql

3. 리팩토링 (진행)
- 코드정리
- 구조 개선


차후 추가 내용?
- grpc 적용
- vue.js 적용
- 세션 관련으로 express session을 사용해보기?
  npm i connect-redis
  
- 패킷 테스터 개선
  postman을 사용하거나 사용하기 편한 툴 제작?
  

2021.12.14
- 채팅, 게임 서버 실행 스크립트 제작
- 코드 정리 (하자 좀)
- 젠킨스 머신 연동 (젠킨스 주소는 노출 시키면 안될듯?)
  (계정 암호화)


코드 정리 기준 (클린코드)
변수
	네이밍을 명확하게 사용하기. (p.22~)
	범용적인 단어 x (data, table)
	뒤에 타입을 제시하는것 x ex) userNameString
	헝가리식 표기법은 이제 무의미, 변수명 길게 쓰더라도 명확하게.
	검색하기 쉬운 단어 사용.
	클래스는 명사 메서드는 동사 위주
	IDE가 좋아졌으므로 해당 기능 활용.
	
함수
	함수는 작게! 짧게! (p.42 ~)
	함수 뎊스가 1단 2단 이상 넘어가면 좋지 않다.
	함수 하나는 하나의 기능만 수행.
	함수 전달 인자는 0에 가까울 수록 좋다.
	출력 매개 변수는 가능하면 사용하지 말고 this. 로 처리.
	매개변수가 많은 경우 가변길이 매개변수 활용.
	함수의 역활 분담. (조회, 처리)
	예외로직처리 -> try catch를 깔끔하게 (p.58~)
	
주석
	적을수록 좋다. 코드로 표현하기.
	권장 주석
		TODO 주석
		예외 사항.
		실행시 성능 부하를 줄 수 있는 코드 경고.
코드 컨벤션
	팀마다 다름 google
	
	
	
2021.12.15
채팅 서버 실행 스크립트 제작 및 aws 서버에 올리기
- 관련 클라이언트 코드 테스트 (UnityProject)

코드 정리 및 구조 개선 방향?
- 타입스크립트 답게...함수형 프로그래밍에 가깝게.
- 흠...

랭킹서버 아이디어
- 프로그램을 실행하면 가상의 대량 점수를 서버에 보냄.
- 서버는 해당 점수를 실시간 랭킹 집계
- 실시간으로 집계되는 랭킹을 N개의 클라에 실시간 전달?
  (성능상 이슈가 있으면 refresh 처리로 해도 괜찮을듯..)
- Redis를 써야 겠지?
- 구현 프로젝트는 어디다 해도 괜찮음 (ProjectT or ProjectG)
- 관련 클라도 구현 되면 좋긴 할듯 (UnityProject or UnrealProject)


2021.12.16
채팅 서버 실행 스크립트 작성 및 aws 머신에 올리기. (완료)

패킷 구조 개선
- gamePacket
- chatPacket
- rankPacket

패킷 구조 개선 적용
- 서버 (확인)
- 패킷 테스터 (전반적으로 개선 필요)
- 유니티 클라 (채팅)

실행 검토 및 테스트 해보기

지금 구조가 커지고 복잡해진다고 가정했을때 좋은 구조인가?
- 쓰기 쉬워야 함 (컨텐츠 추가, 수정)
- 읽기 쉬워야 함


이후 추가 할 것
서버 로직 처리하는 부분의 구조 개선
패킷 테스터 기능 추가


2021.12.17
코드 개선 작업 
- 로직 처리 (설계중)
- 테스트 클라이언트 개선 (완료)
- 운영툴 패킷 테스터 (진행중)

버그 수정 
- 컨트롤러 바인딩 에러

코드 정리
- 불필요한 하드코드 제거
- 한 군데에서만 쓰이는 코드는 define에서 제거
  전역 변수로 선언해서 쓸 이유가 없음


2021.12.20
코드 개선 작업 
- 로직 처리 (설계중)


패킷 테스트 툴 기반 작업
- 이전 버젼 npm 패키지로는 실행시 에러남.

> npm install node-fetch@2
> npm install @types/node-fetch@2


해야 하는 작업?
- 테이블 데이터는 csv 파싱 및 관리 클래스 작성?
  (쿼리 수준의 편리한 인터페이스도)

- sql R/W connect 분리


2021.12.21
오늘 할 것
- 서버 로직 부분의 구조 잡기 (초안)
- 구도만 잡아놓고 C# 프로젝트(projectG) 신경쓰기
- 어떤 설계나 구조가 100% 완벽하고 훌륭한지 이제는 잘 모르겠다...
- 각자의 생각이나 프로젝트의 구조에 따라 좋은 설계나 좋은 프로그램 구조라는것이 정해지는 건가?


어제 면접 질문 정리
1. api 프레임워크 차이점

api : (aplication programming interface), 어플 개발을 할 수 있게 제공된 인터페이스.

프레임워크 : ex) node.js. .net framework, vue.js 등
            보통 제품단위로 제공되고 그 제품의 종속적으로 응용프로그램 제작


2. 동기/비동기의 차이

- 동기 : 순차적. 직렬적. 으로 테스크를 수행
    - 요청을 보낸 후 결과물을 받아야만 다음 동작으로 넘어간다.
    - 순차적으로 진행 되며 선행일이 완료가 되지 않으면 다음일은 대기함.
- 비동기 : 병렬적. 으로 테스크를 수행
    - 요청을 보낸 후 결과물 받기를 기다리지 않고 다음 작업  수행으로 넘어감.
    - 비동기 작업을 진행 하지만 결과물을 기다릴 필요가 있을 경우 await 키워드 사용.
    - * 참고로 자바스크립트는 await를 붙이지 않으면 비동기 작업으로 수행됨.


3. 블로킹/넌 블로킹의 차이

- 동기/비동기와 비슷하지만 동기/비동기 와의 차이점은 제어권의 양도라고 생각함.
- 블로킹/넌 블로킹의 경우 호출 받은 서브 테스크가 바로 return을 해서 호출한 함수에게 제어권을 주면 넌 블로킹
- 호출받은 서브 테스크가 자신의 작업을 모두 마칠때까지 제어권을 넘기지 않으면 블로킹
- 조금 햇갈리네..

4. sql, redis 의 동시성 해결 방법?
- 경험을 해본건지 아닌지 기억이 잘 안남...
- lock을 걸어서 해결 했나?

아는 부분까지 대답은 했지만...ㅠ

docker의 확장성 있는 사용.
- 실제 서비스 서버에서도 docker를 활용하면 편하다.
- 쿠버네틱스?


2021.12.22
오늘 할 것
에러 처리 일관화 및 정리 (완료..)
- 시스템 에러와 컨텐츠 에러의 분류
- 성공인 경우와 에러인 경우 response 일관성 있게.
- 다른 프로젝트 해야 하는데 이것만 완성하자...ㅠ


에러 분류 기준
1. 시스템 에러
- 응용프로그램 코드가 아닌 내부 API에서 에러가 나는 경우.
- 메모리 관련
- ETC..

2. 컨텐츠 에러
- DB 결과가 없음
- 컨텐츠 로직 에러
- ..


더 해볼 작업 및 장기 목표
1. 테이블 데이터 csv 관리 클래스 개선
- 구조개선
- 쿼리 수준의 편리한 인터페이스 제공

2. 성능
- sql R/W connect 분리

3. 기능
- logger 기능 추가 및 강화
- 에러처리 일관화.

4. 기타
- 랭킹


2022.10.12

Dockerlize 및 배포 자동화
1. 로컬 docker 환경에 서비스 배포.
2. AWS ECR,ECS를 통한 서비스 배포.
3. GitHub CI/CD를 통하여 배포 자동화 하기.
